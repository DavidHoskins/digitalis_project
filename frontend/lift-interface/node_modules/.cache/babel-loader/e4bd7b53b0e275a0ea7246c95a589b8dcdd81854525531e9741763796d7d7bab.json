{"ast":null,"code":"var _jsxFileName = \"/home/davidhoskins/Documents/Test_bench/digitalis_coding_test/frontend/lift-interface/src/lift_console.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LiftConsole extends React.Component {\n  constructor(props) {\n    super(props);\n    this.get_lift_status = async intervalId => {\n      try {\n        await fetch('http://127.0.0.1:8000/api/lift/status/').then(res => {\n          return res.json();\n        }).then(data => {\n          for (let i = 0; i < data[\"lifts\"].length; i++) {\n            if (this.state.elevator_choice.includes(i)) {\n              if (data[\"lifts\"][i][\"floor\"] == this.props.current_floor || !data[\"lifts\"][i][\"destinations\"].includes(i)) {\n                const removed_list = this.state.elevator_choice.filter(elevator_number => elevator_number != i);\n                console.log(removed_list + \" \" + i);\n                this.setState({\n                  elevator_choice: removed_list\n                });\n                clearInterval(intervalId);\n              }\n            }\n          }\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    this.state = {\n      data: [],\n      elevator_choice: []\n    };\n  }\n  request_lift(to_floor, from_floor) {\n    try {\n      fetch('http://localhost:8000/api/lift/request/', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          from_floor: from_floor,\n          to_floor: to_floor\n        })\n      }).then(res => {\n        return res.json();\n      }).catch(error => {\n        console.log(error);\n      }).then(data => {\n        if (!this.state.elevator_choice.includes(data[\"lift\"])) {\n          const elevator_choices = this.state.elevator_choice;\n          elevator_choices.push(data[\"lift\"]);\n          console.log(elevator_choices);\n          this.setState({\n            elevator_choice: elevator_choices\n          });\n          const intervalId = setInterval(() => {\n            this.get_lift_status(intervalId); // Fetch data every 1 second not the best solution but allows for updates to lifts floor.\n          }, 1000);\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  // On mount load lift data for serviced floors\n  componentDidMount() {\n    try {\n      fetch('http://127.0.0.1:8000/api/lift/config/').then(res => {\n        console.log(res);\n        return res.json();\n      }).catch(error => {\n        console.log(error);\n      }).then(data => {\n        let avaliable_floors = [];\n        for (let lift of data[\"lifts\"]) {\n          // Only show floors reachable from current floor\n          if (lift[\"serviced_floors\"].includes(this.props.current_floor)) {\n            avaliable_floors = avaliable_floors.concat(lift[\"serviced_floors\"].filter(item2 => !avaliable_floors.some(item1 => item1 === item2)));\n          }\n        }\n        this.setState({\n          data: avaliable_floors\n        });\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"LiftConsole\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: \"Lift Console\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"Go to lift: \", this.state.elevator_choice.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }, this), this.state.data.map(floor_number => /*#__PURE__*/_jsxDEV(Button, {\n            \"data-testid\": \"LiftConsoleButton\",\n            variant: \"primary\",\n            onClick: () => this.request_lift(floor_number, this.props.current_floor),\n            children: floor_number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 66\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 18\n    }, this);\n  }\n}\nexport default LiftConsole;","map":{"version":3,"names":["React","useState","useEffect","Card","Button","jsxDEV","_jsxDEV","LiftConsole","Component","constructor","props","get_lift_status","intervalId","fetch","then","res","json","data","i","length","state","elevator_choice","includes","current_floor","removed_list","filter","elevator_number","console","log","setState","clearInterval","error","request_lift","to_floor","from_floor","method","headers","body","JSON","stringify","catch","elevator_choices","push","setInterval","componentDidMount","avaliable_floors","lift","concat","item2","some","item1","render","children","style","width","Body","Title","fileName","_jsxFileName","lineNumber","columnNumber","Text","toString","map","floor_number","variant","onClick"],"sources":["/home/davidhoskins/Documents/Test_bench/digitalis_coding_test/frontend/lift-interface/src/lift_console.js"],"sourcesContent":["import React from 'react';\n\nimport { useState, useEffect } from 'react';\n\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nclass LiftConsole extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            elevator_choice: []\n        };\n    }\n\n    get_lift_status = async (intervalId) => { \n        try {\n            await fetch('http://127.0.0.1:8000/api/lift/status/')\n            .then((res) => {\n                return res.json();\n            })\n            .then((data) => {\n                for(let i = 0; i < data[\"lifts\"].length; i++)\n                {\n                    if(this.state.elevator_choice.includes(i))\n                    {\n                        if(data[\"lifts\"][i][\"floor\"] == this.props.current_floor || !data[\"lifts\"][i][\"destinations\"].includes(i))\n                        {\n                            const removed_list = this.state.elevator_choice.filter((elevator_number) => elevator_number != i);\n                            console.log(removed_list + \" \" + i)\n                            this.setState({elevator_choice : removed_list});\n                            clearInterval(intervalId);\n                        }\n                    }\n                }\n            });\n        } catch (error){\n            console.error(error);\n        }\n    }\n\n    request_lift(to_floor, from_floor)\n    {\n        try {\n            fetch('http://localhost:8000/api/lift/request/', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                from_floor: from_floor,\n                to_floor: to_floor,\n            })\n            }).then((res) => {\n                return res.json();\n            }).catch((error) => {\n                console.log(error);\n            }).then((data) => {\n                if(!this.state.elevator_choice.includes(data[\"lift\"]))\n                {\n                    const elevator_choices = this.state.elevator_choice;\n                    elevator_choices.push(data[\"lift\"]);\n                    console.log(elevator_choices);\n                    this.setState({elevator_choice : elevator_choices});\n\n                    const intervalId = setInterval(() => {\n                        this.get_lift_status(intervalId); // Fetch data every 1 second not the best solution but allows for updates to lifts floor.\n                    }, 1000);\n                }\n            }).catch((error) => {\n                console.log(error);\n            });\n        } catch (error){\n            console.error(error);\n        }\n    }\n\n    // On mount load lift data for serviced floors\n    componentDidMount() \n    {   try\n        {\n            fetch('http://127.0.0.1:8000/api/lift/config/')\n            .then((res) => {\n            console.log(res);\n            return res.json();\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n            .then((data) => {\n            let avaliable_floors = [];\n            for (let lift of data[\"lifts\"]){\n                // Only show floors reachable from current floor\n                if (lift[\"serviced_floors\"].includes(this.props.current_floor)) {\n                    avaliable_floors = avaliable_floors.concat(lift[\"serviced_floors\"].filter(item2 =>\n                        !avaliable_floors.some(item1 => item1 === item2)\n                    ));\n                }\n            }\n            this.setState({data : avaliable_floors});\n            });\n        } catch (error){\n            console.error(error);\n        }\n    }\n\n    render()\n    {\n        return ( <div data-testid=\"LiftConsole\">\n            <Card style={{ width: '100%' }}>\n                <Card.Body>\n                    <Card.Title>Lift Console</Card.Title>\n                    <Card.Text>Go to lift: {this.state.elevator_choice.toString()}</Card.Text>\n                        {this.state.data.map((floor_number) => ( <Button data-testid=\"LiftConsoleButton\" variant=\"primary\" onClick={() => this.request_lift(floor_number, this.props.current_floor)}>{floor_number}</Button>))}\n                </Card.Body>\n            </Card>\n        </div>\n        );\n    }\n}\nexport default LiftConsole;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}