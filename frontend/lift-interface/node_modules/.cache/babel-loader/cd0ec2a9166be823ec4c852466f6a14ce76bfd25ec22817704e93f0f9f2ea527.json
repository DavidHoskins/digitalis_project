{"ast":null,"code":"var _jsxFileName = \"/home/davidhoskins/Documents/Test_bench/digitalis_coding_test/frontend/lift-interface/src/lift_console.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport LiftConsoleButton from './lift_console_button';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LiftConsole extends React.Component {\n  constructor(props) {\n    super(props);\n    this.get_lift_status = async intervalId => {\n      await fetch('http://127.0.0.1:8000/api/lift/status/').then(res => {\n        console.log(res);\n        return res.json();\n      }).then(data => {\n        console.log(data[\"lifts\"]);\n        for (let i = 0; i < data[\"lifts\"].length; i++) {\n          if (this.state.elevator_choice.includes(i)) {\n            console.log(\"test\" + data[\"lifts\"][i][\"destinations\"]);\n            const removed_list = this.state.elevator_choice.filter(elevator_number => elevator_number != i);\n            console.log(removed_list + \" \" + i);\n            this.setState({\n              elevator_choice: removed_list\n            });\n            clearInterval(intervalId);\n          }\n        }\n      });\n    };\n    this.state = {\n      data: [],\n      elevator_choice: []\n    };\n  }\n  submit_request(to_floor, from_floor) {\n    console.log(\"floor request \" + to_floor + \" \" + from_floor);\n    fetch('http://localhost:8000/api/lift/request/', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        from_floor: from_floor,\n        to_floor: to_floor\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      console.log(data);\n      if (!this.state.elevator_choice.includes(data[\"lift\"])) {\n        const elevator_choices = this.state.elevator_choice;\n        elevator_choices.push(data[\"lift\"]);\n        console.log(elevator_choices);\n        this.setState({\n          elevator_choice: elevator_choices\n        });\n        const intervalId = setInterval(() => {\n          this.get_lift_status(intervalId); // Fetch data every 1 second not the best solution but allows for updates to lifts floor.\n        }, 1000);\n        return;\n      }\n    });\n  }\n  componentDidMount() {\n    fetch('http://127.0.0.1:8000/api/lift/config/').then(res => {\n      console.log(res);\n      return res.json();\n    }).then(data => {\n      let avaliable_floors = [];\n      for (let lift of data[\"lifts\"]) {\n        // Only show floors reachable from current floor\n        if (lift[\"serviced_floors\"].includes(this.props.current_floor)) {\n          avaliable_floors = avaliable_floors.concat(lift[\"serviced_floors\"].filter(item2 => !avaliable_floors.some(item1 => item1 === item2)));\n        }\n      }\n      this.setState({\n        data: avaliable_floors\n      });\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: \"Lift Console\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"Go to lift: \", this.state.elevator_choice.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }, this), this.state.data.map(floor_number => /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: () => this.submit_request(floor_number, this.props.current_floor),\n            children: floor_number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 66\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 18\n    }, this);\n  }\n}\nexport default LiftConsole;","map":{"version":3,"names":["React","useState","useEffect","LiftConsoleButton","Card","Button","jsxDEV","_jsxDEV","LiftConsole","Component","constructor","props","get_lift_status","intervalId","fetch","then","res","console","log","json","data","i","length","state","elevator_choice","includes","removed_list","filter","elevator_number","setState","clearInterval","submit_request","to_floor","from_floor","method","headers","body","JSON","stringify","elevator_choices","push","setInterval","componentDidMount","avaliable_floors","lift","current_floor","concat","item2","some","item1","render","children","style","width","Body","Title","fileName","_jsxFileName","lineNumber","columnNumber","Text","toString","map","floor_number","variant","onClick"],"sources":["/home/davidhoskins/Documents/Test_bench/digitalis_coding_test/frontend/lift-interface/src/lift_console.js"],"sourcesContent":["import React from 'react';\n\nimport { useState, useEffect } from 'react';\n\nimport LiftConsoleButton from './lift_console_button';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nclass LiftConsole extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            elevator_choice: []\n        };\n    }\n\n    get_lift_status = async (intervalId) => { \n        await fetch('http://127.0.0.1:8000/api/lift/status/')\n      .then((res) => {\n        console.log(res)\n        return res.json();\n      })\n      .then((data) => {\n        console.log(data[\"lifts\"]);\n        for(let i = 0; i < data[\"lifts\"].length; i++)\n        {\n            if(this.state.elevator_choice.includes(i))\n            {\n                console.log(\"test\" + data[\"lifts\"][i][\"destinations\"])\n                const removed_list = this.state.elevator_choice.filter((elevator_number) => elevator_number != i);\n                console.log(removed_list + \" \" + i)\n                this.setState({elevator_choice : removed_list});\n                clearInterval(intervalId);\n            }\n        }\n      });\n    }\n\n    submit_request(to_floor, from_floor)\n    {\n        console.log(\"floor request \" + to_floor + \" \"+ from_floor)\n        fetch('http://localhost:8000/api/lift/request/', {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            from_floor: from_floor,\n            to_floor: to_floor,\n        })\n        }).then((res) => {\n            return res.json();\n        }).then((data) => {\n            console.log(data);\n            if(!this.state.elevator_choice.includes(data[\"lift\"]))\n            {\n                const elevator_choices = this.state.elevator_choice;\n                elevator_choices.push(data[\"lift\"]);\n                console.log(elevator_choices);\n                this.setState({elevator_choice : elevator_choices});\n\n                const intervalId = setInterval(() => {\n                    this.get_lift_status(intervalId); // Fetch data every 1 second not the best solution but allows for updates to lifts floor.\n                }, 1000);\n          \n                return;\n            }\n        });\n    }\n\n    componentDidMount() \n    {    \n        fetch('http://127.0.0.1:8000/api/lift/config/')\n        .then((res) => {\n          console.log(res);\n          return res.json();\n        })\n        .then((data) => {\n          let avaliable_floors = [];\n          for (let lift of data[\"lifts\"]){\n            // Only show floors reachable from current floor\n              if (lift[\"serviced_floors\"].includes(this.props.current_floor)) {\n                  avaliable_floors = avaliable_floors.concat(lift[\"serviced_floors\"].filter(item2 =>\n                      !avaliable_floors.some(item1 => item1 === item2)\n                  ));\n              }\n          }\n          this.setState({data : avaliable_floors});\n        });\n    }\n\n    render()\n    {\n        return ( <div>\n            <Card style={{ width: '100%' }}>\n                <Card.Body>\n                    <Card.Title>Lift Console</Card.Title>\n                    <Card.Text>Go to lift: {this.state.elevator_choice.toString()}</Card.Text>\n                        {this.state.data.map((floor_number) => ( <Button variant=\"primary\" onClick={() => this.submit_request(floor_number, this.props.current_floor)}>{floor_number}</Button>))}\n                </Card.Body>\n            </Card>\n        </div>\n        );\n    }\n}\nexport default LiftConsole;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}